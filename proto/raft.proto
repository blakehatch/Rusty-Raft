syntax = "proto3";

package raft;

// The request from a candidate to vote for them
message VoteRequest {
  uint32 term = 1;         // candidate’s term
  uint32 candidateId = 2;  // candidate requesting vote
  uint32 lastLogIndex = 3; // index of candidate’s last log entry
  uint32 lastLogTerm = 4;  // term of candidate’s last log entry
}

// The response to a vote request
message VoteResponse {
  uint32 term = 1;         // currentTerm, for candidate to update itself
  bool voteGranted = 2;    // true means candidate received vote
}

// The request to append entries to the log (used for log replication)
message AppendEntriesRequest {
  uint32 term = 1;         // leader’s term
  uint32 leaderId = 2;     // so follower can redirect clients
  uint32 prevLogIndex = 3; // index of log entry immediately preceding new ones
  uint32 prevLogTerm = 4;  // term of prevLogIndex entry
  repeated LogEntry entries = 5; // log entries to store (empty for heartbeat; may send more than one for efficiency)
  uint32 leaderCommit = 6; // leader’s commitIndex
}

// The response to an append entries request
message AppendEntriesResponse {
  uint32 term = 1;         // currentTerm, for leader to update itself
  bool success = 2;        // true if follower contained entry matching prevLogIndex and prevLogTerm
}

// A log entry contains command for state machine, and term when entry was received by leader
message LogEntry {
  uint32 term = 1;
  string command = 2;
}

// Service definitions (if using gRPC for communication)
service Raft {
  rpc RequestVote(VoteRequest) returns (VoteResponse) {}
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
}